$r src-pre  $:$;$c !no-source $:
#include "$r include-path $:inc.h$;"

#include <stdio.h>
#include <stdlib.h>

$r transition-table $:$;

$r callback-array $:$;

$r info-array $:$;

$r start-state $:$;

$r pattern-mapping $:$;

TransTab kev_lexgen_get_transition_table(void);
int* kev_lexgen_get_pattern_mapping(void);
size_t kev_lexgen_get_start_state(void);
const char** kev_lexgen_get_info(void);
Callback** kev_lexgen_get_callbacks(void);

bool $r function-prefix $:lex$;_init($r lexer-name $:Lex$;* lex, char* filepath) {
  if (!lex) return false;
  lex->buffer = NULL;
  lex->table = kev_lexgen_get_transition_table();
  lex->patterns = kev_lexgen_get_pattern_mapping();
  lex->start_state = kev_lexgen_get_start_state();
  lex->callbacks = kev_lexgen_get_callbacks();
  if (!filepath) return false;
  FILE* file = fopen(filepath, "rb");
  if (!file) return false;
  fseek(file, 0, SEEK_END);
  size_t filesize = ftell(file);
  fseek(file, 0, SEEK_SET);
  uint8_t* buffer = (uint8_t*)malloc(sizeof (uint8_t) * (filesize + 2));
  if (!buffer) {
    fclose(file);
    return false;
  }
  if (fread(buffer, sizeof (uint8_t), filesize, file) == 0) {
    free(buffer);
    fclose(file);
    return false;
  }
  fclose(file);
  buffer[filesize] = '\0';
  buffer[filesize + 1] = '\0';
  lex->buffer = buffer;
  return true;
}

void $r function-prefix $:lex$;_destroy($r lexer-name $:Lex$;* lex) {
  if (lex) {
    free(lex->buffer);
    lex->buffer = NULL;
  }
}

void $r function-prefix $:lex$;_next($r lexer-name $:Lex$;* lex, Token* token) {
  uint8_t (*table)[256] = lex->table;
  uint8_t state = lex->start_state;
  uint8_t next_state = 0;
  uint8_t* curpos = lex->buffer + token->end;
  uint8_t ch = *curpos;
  $c auto-clear-blank $:
  while (ch == ' ' || ch == '\n' || ch == '\t' || ch == '\r')
    ch = *++curpos;
  $|$;
  while ((next_state = table[state][ch]) != LEX_DEAD) {
    ch = *++curpos;
    state = next_state;
  }
  token->begin = token->end;
  token->end = curpos - lex->buffer;
  token->kind = lex->patterns[state];
  if (lex->callbacks[state])
    lex->callbacks[state](token, lex->buffer + token->begin);
}

const char* $r function-prefix $:lex$;_get_info($r lexer-name $:Lex$;* lex, int kind) {
  return kev_lexgen_get_info()[kind];
}
$|
$r info-array $:$;
$;
$r inc-post $:$;
