#include "$r include-path $:inc.h$;"

#include <stdio.h>
#include <stdlib.h>

using TransTab = $r lexer-name $:Lex$;::TransTab;
using Callback = $r lexer-name $:Lex$;::Callback;
TransTab kev_lexgen_get_transition_table(void);
int* kev_lexgen_get_pattern_mapping(void);
size_t kev_lexgen_get_start_state(void);
const char** kev_lexgen_get_info(void);
Callback** kev_lexgen_get_callbacks(void);

$r lexer-name $:Lex$;::$r lexer-name $:Lex$;(const std::string& filepath) {
  buffer = NULL;
  table = kev_lexgen_get_transition_table();
  patterns = kev_lexgen_get_pattern_mapping();
  start_state = kev_lexgen_get_start_state();
  callbacks = kev_lexgen_get_callbacks();
  FILE* file = fopen(filepath.c_str(), "rb");
  if (!file) return;
  fseek(file, 0, SEEK_END);
  size_t filesize = ftell(file);
  fseek(file, 0, SEEK_SET);
  buffer = new uint8_t[filesize + 2];
  if (fread(buffer, sizeof (uint8_t), filesize, file) == 0) {
    free(buffer);
    fclose(file);
    buffer = NULL;
    return;
  }
  fclose(file);
  buffer[filesize] = '\0';
  buffer[filesize + 1] = '\0';
}

$r lexer-name $:Lex$;::~$r lexer-name $:Lex$;() {
  delete[] buffer;
  buffer = NULL;
}

void $r lexer-name $:Lex$;::next(Token& token) {
  uint8_t state = start_state;
  uint8_t next_state = 0;
  uint8_t* curpos = buffer + token.end;
  uint8_t ch = *curpos;
  $c auto-clear-blank $:
  while (ch == ' ' || ch == '\n' || ch == '\t' || ch == '\r')
    ch = *++curpos;
  $|$;
  while ((next_state = table[state][ch]) != dead_state) {
    ch = *++curpos;
    state = next_state;
  }
  token.begin = token.end;
  token.end = curpos - buffer;
  token.kind = patterns[state];
  if (callbacks[state])
    callbacks[state](token, buffer);
}

std::string $r lexer-name $:Lex$;::get_info(int kind) {
  return std::string(kev_lexgen_get_info()[kind]);
}

