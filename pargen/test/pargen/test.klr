decl t: num, '+', '-', '*', '/', '(', ')', '$';
decl n: expr;

expr : expr '+' expr  ` $0 = $1 + $3; `
     | expr '-' expr  ` $0 = $1 - $3; `
     | expr '*' expr  ` $0 = $1 * $3; `
     | expr '/' expr  ` $0 = $1 / $3; `
     | '+' expr       ` $0 = $2; `
     | '-' expr       ` $0 = - $2; `
     | '(' expr ')'   ` $0 = $2; `
     | num            ` $0 = $1; `
     ;

#attribute settings
set prio '+'(post) = '-'(post) < '+' = '-' < '*'(post) = '/'(post) < '*' = '/' <;
set prio '+'(pre) = '-'(pre);
set start expr;
set end '$';
set con priority, shifting, log : "expr.log";

#define placeholder character
%placeholder = "\xFF";

#this must be a typedef statement to define a function type LRCallback
%callback-type = "typedef void LRCallback(Symbol* stk);";

#this will be placed before function body, placeholder will be replaced with function name
%callback-head = "static void " .. placeholder .. "(Symbol* stk) {\n";

#symbol reference format.
#placeholder will be replaced with index.
#use '#' followed by index(number or identifier) to trigger the replacement.
%stk-idx-fmt = "stk[(" .. placeholder .. ") == 0 ? 0 : (" .. placeholder .. ") - 1]";

#symbol attribute reference format.
#placeholder will be replaced with index.
#use '$' followed by index(number or identifier) to trigger the replacement.
%attr-idx-fmt = stk-idx-fmt .. ".attr";

#this will be placed after function body
%callback-tail = "\n}\n\n";


%attr-definition = "float";

%lexer-token-next = `lex_next(input);`;

%lexer-init = lexer-token-next;

%lexer-token-id-expr = `token_id`;

%lexer-token-convert-attr = `attr = attrval;`;

%source-pre = `
#include <ctype.h>

static int token_id = 0;
static float attrval = 0.0;
void lex_next(FILE* stream);
`;

%source-post = `
void lex_next(FILE* stream) {
  int ch = fgetc(stream);
  while (ch == ' ' || ch == '\t')
    ch = fgetc(stream);
  if (isdigit(ch)) {
    ungetc(ch, stream);
    fscanf(stream, "%f", &attrval);
    token_id = ` .. idof (num) .. `;
  } else if (ch == '+') {
    token_id = ` .. idof ('+') .. `;
  } else if (ch == '-') {
    token_id = ` .. idof ('-') .. `;
  } else if (ch == '*') {
    token_id = ` .. idof ('*') .. `;
  } else if (ch == '/') {
    token_id = ` .. idof ('/') .. `;
  } else if (ch == '(') {
    token_id = ` .. idof ('(') .. `;
  } else if (ch == ')') {
    token_id = ` .. idof (')') .. `;
  } else if (ch == EOF || ch == '\n') {
    token_id = ` .. idof ('$') .. `;
  } else {
    fprintf(stderr, "lexical error\n");
    lex_next(stream);
  }
}

int main(int argc, char** argv) {
  while (true) {
    printf(">>>");
    float result = parse(stdin);
    printf("%f\n", result);
  }
  return 0;
}`;
